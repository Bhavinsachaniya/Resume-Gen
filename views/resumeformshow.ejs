<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Resume Builder</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/resumeshow.css">
</head>

<body>
  <div class="alert-container" id="alert-container"></div>
  <%- include('header') %>

  <form id="resumeForm">

    <!-- Contact Info -->
    <div class="container-1-1-1 active">
      <h2><span style="color: #4f46e5">Let's get in</span> touch</h2>
      <p>We need your contact info to build your resume</p>
      <div class="form-grid">
        <div><label>First Name</label><input type="text" name="firstName" required></div>
        <div><label>Last Name</label><input type="text" name="lastName" required></div>
        <div><label>Email</label><input type="email" name="email" required></div>
        <div><label>Phone</label><input type="tel" name="phone" required></div>
        <div><label>City</label><input type="text" name="city" required></div>
        <div><label>Postal Code</label><input type="text" name="postal" required></div>
      </div>
      <div class="action-buttons justify-content-end">
        <button type="button" class="button button-primary-button next">Next</button>
      </div>
    </div>

    <!-- Experience -->
    <!-- Experience -->
<!-- Experience -->
<div class="container-1-1-1">
  <h2><span style="color: #4f46e5">Tell us</span> about your experience</h2>
  <p>Start with recent job or experience</p>
  
  <div id="experience-list">
    <div class="experience-item">
      <div class="form-grid">
        <div><label>Job Title</label><input type="text" name="jobTitle" required></div>
        <div><label>Company Name</label><input type="text" name="company" required></div>
        <div><label>City</label><input type="text" name="jobCity" required></div>
        <div><label>Country</label><input type="text" name="jobCountry" required></div>
        <div><label>Start Date</label><input type="month" name="jobStart" required></div>
        <div><label>End Date</label><input type="month" name="jobEnd" required></div>
      </div>

    

          <div class="description-container-1-1-1">
         <label>Description</label>
        <textarea name="jobDesc"  id="Experience-description-1" required></textarea>
        <button class="generate-button"id="Experience-genratewithai-1"  onclick="AIGenratedData('Experience-description-1' , 'Experience-genratewithai-1' , '1')" type="button">Generate with AI</button>
      </div>
       
      <button type="button" class="button button-add-experience">Add Experience</button>
    </div>
  </div>

  <div class="action-buttons">
    <button type="button" class="button button-outline prev">Back</button>
    <button type="button" class="button button-primary-button next">Next</button>
  </div>
</div>
<!-- Education -->
<div class="container-1-1-1">
  <h2><span style="color: #4f46e5">Tell us</span> about your education</h2>
  <p>Start with your most recent education</p>

  <div id="education-list">
    <div class="education-item">
      <div class="form-grid">
        <div>
          <label>School / University</label>
          <input type="text" name="eduschool" placeholder="e.g. Stanford University" required>
        </div>
        <div>
          <label>Degree</label>
          <input type="text" name="edudegree" placeholder="e.g. B.Tech in IT" required>
        </div>
        <div>
          <label>City</label>
          <input type="text" name="educity" placeholder="e.g. Ahmedabad" required>
        </div>
        <div>
          <label>Country</label>
          <input type="text" name="educountry" placeholder="e.g. India" required>
        </div>
        <div>
          <label>Start Date</label>
          <input type="month" name="edustartdate" required>
        </div>
        <div>
          <label>End Date</label>
          <input type="month" name="eduenddate" required>
        </div>
      </div>

      <div class="description-container-1-1-1">
        <label>GPA / Percentage</label>
        <input type="text" name="edugpa" placeholder="e.g. 8.5 CGPA or 75%" required>
      </div>

      <button type="button" class="button button-add-education">Add Education</button>
    </div>
  </div>

  <div class="action-buttons">
    <button type="button" class="button button-outline prev">Back</button>
    <button type="button" class="button button-primary-button next">Next</button>
  </div>
</div>
<!-- Projects -->
<div class="container-1-1-1">
  <h2><span style="color: #4f46e5">Showcase</span> your projects</h2>
  <p>Tell us about the projects you've worked on</p>

  <div id="project-list">
    <div class="project-item">
      <div class="form-grid">
        <div><label>Project Title</label><input type="text" name="ProjectTitle" required></div>
        <div><label>Project Start Date</label><input type="month" name="ProjectStartDate" required></div>
        <div><label>Project End Date</label><input type="month" name="ProjectEndDate" required></div>
      </div>

      <div class="description-container-1-1-1">
        <label>Project Overview</label>
        <textarea name="Project-overview" id="Project-description-1" required></textarea>
        <button class="generate-button" id="Project-genratewithai-1"  onclick="AIGenratedData('Project-description-1' , 'Project-genratewithai-1' , '2')" type="button">Generate with AI</button>
      </div>

      <button type="button" class="button button-add-project">Add Project</button>
    </div>
  </div>

  <div class="action-buttons">
    <button type="button" class="button button-outline prev">Back</button>
    <button type="button" class="button button-primary-button next">Next</button>
  </div>
</div>



  <!-- Achievements -->
    <div class="container-1-1-1">
      <h2><span style="color: #4f46e5">Highlight</span> your key Achievements</h2>
      <p>Mention your technical and Non technical Achievement</p>

      <div id="AchievementContainer" class="skills-flex">
        <div class="Achievement-input">
          <input type="text" name="achievementTitle[]" placeholder="Enter a Achievement Title" required>
        </div>
      </div>

      <div style="margin-top: 10px; text-align: left;">
        <button type="button" class="button button-outline" onclick="achievementTitle()">Add Achievement</button>
      </div>

      <div class="action-buttons">
        <button type="button" class="button button-outline prev">Back</button>
        <button type="button" class="button button-primary-button next">Next</button>
      </div>
    </div>



    <!-- Skills -->
    <div class="container-1-1-1">
      <h2><span style="color: #4f46e5">Highlight</span> your key skills</h2>
      <p>Mention your technical and soft skills</p>

      <div id="skillsContainer" class="skills-flex">
        <div class="skill-input">
          <input type="text" name="skills[]" placeholder="Enter a skill" required>
        </div>
      </div>

      <div style="margin-top: 10px; text-align: left;">
        <button type="button" class="button button-outline" onclick="addSkill()">Add Skill</button>
      </div>

      <div class="action-buttons">
        <button type="button" class="button button-outline prev">Back</button>
        <button type="button" class="button button-primary-button next">Next</button>
      </div>
    </div>
    

    <!-- Summary -->
    <div class="container-1-1-1">
      <h2><span style="color: #4f46e5">Write</span> your professional summary</h2>
      <p>This is your elevator pitchâ€”keep it sharp and impactful</p>
      <div class="description-container-1-1-1">
        <label>Summary</label>
        <textarea name="summary"  id="About-description-1"  rows="6" required></textarea>
        <button class="generate-button" id="About-genratewithai-1" onclick="AIGenratedData('About-description-1' , 'About-genratewithai-1' , '3')"  type="button">Generate with AI</button>
      </div>
      <div class="action-buttons">
        <button type="button" class="button button-outline prev">Back</button>
        <button type="submit" id="update" class="button button-primary-button">Submit Resume</button>
      </div>
    </div>
  </form>


  <script>
    

document.addEventListener('DOMContentLoaded', async () => {
  try {
    const response = await fetch('http://localhost:3000/api/resumeform/show', {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(errorText || 'Failed to fetch resume data');
    }

    const data = await response.json();
    const resume = data.resume || {};
    console.log('Fetched Resume Data:', resume);

    // === Contact Info ===
    document.querySelector('input[name="firstName"]').value = resume.firstname || '';
    document.querySelector('input[name="lastName"]').value = resume.lastname || '';
    document.querySelector('input[name="city"]').value = resume.city || '';
    document.querySelector('input[name="postal"]').value = resume.postalcode || '';
    document.querySelector('input[name="phone"]').value = resume.phone || '';
    document.querySelector('input[name="email"]').value = resume.email || '';

// === Experience ===
if (Array.isArray(resume.experience)) {
  resume.experience.forEach(async (item, i) => {
    // Wait for the dynamic addition of sections (if required)
    if (i > 0 && typeof window.addExperience === 'function') {
      await addExperience(); // Wait until it's added before continuing
    }

    const containers = document.querySelectorAll('.experience-item');
    const container = containers[i];
    if (container) {
      const get = (sel) => container.querySelector(sel);
      if (get('input[name^="jobTitle"]')) get('input[name^="jobTitle"]').value = item.jobTitle || '';
      if (get('input[name^="company"]')) get('input[name^="company"]').value = item.companyName || '';
      if (get('input[name^="jobCity"]')) get('input[name^="jobCity"]').value = item.expCity || '';
      if (get('input[name^="jobCountry"]')) get('input[name^="jobCountry"]').value = item.country || '';
      if (get('input[name^="jobStart"]')) get('input[name^="jobStart"]').value = item.startDate || '';
      if (get('input[name^="jobEnd"]')) get('input[name^="jobEnd"]').value = item.endDate || '';
      if (get('textarea[name^="jobDesc"]')) get('textarea[name^="jobDesc"]').value = item.description || '';
    }
  });
}

// === Education ===
if (Array.isArray(resume.education)) {
  resume.education.forEach(async (edu, i) => {
    // Wait for the dynamic addition of sections (if required)
    if (i > 0 && typeof window.addEducation === 'function') {
      await addEducation();
    }

    const containers = document.querySelectorAll('.education-item');
    const container = containers[i];
    if (container) {
      const get = (sel) => container.querySelector(sel);
      if (get('input[name^="eduschool"]')) get('input[name^="eduschool"]').value = edu.school || '';
      if (get('input[name^="edudegree"]')) get('input[name^="edudegree"]').value = edu.degree || '';
      if (get('input[name^="educity"]')) get('input[name^="educity"]').value = edu.city || '';
      if (get('input[name^="educountry"]')) get('input[name^="educountry"]').value = edu.country || '';
      if (get('input[name^="edustartdate"]')) get('input[name^="edustartdate"]').value = edu.startDate || '';
      if (get('input[name^="eduenddate"]')) get('input[name^="eduenddate"]').value = edu.endDate || '';
      if (get('input[name^="edugpa"]')) get('input[name^="edugpa"]').value = edu.edugpa || '';
    }
  });
}

// === Projects ===
if (Array.isArray(resume.Project)) {
  resume.Project.forEach(async (proj, i) => {
    // Wait for the dynamic addition of sections (if required)
    if (i > 0 && typeof window.addProject === 'function') {
      await addProject();
    }

    const containers = document.querySelectorAll('.project-item');
    const container = containers[i];
    if (container) {
      const get = (sel) => container.querySelector(sel);
      if (get('input[name^="ProjectTitle"]')) get('input[name^="ProjectTitle"]').value = proj.ptitle || '';
      if (get('input[name^="ProjectStartDate"]')) get('input[name^="ProjectStartDate"]').value = proj.pstartDate || '';
      if (get('input[name^="ProjectEndDate"]')) get('input[name^="ProjectEndDate"]').value = proj.penddate || '';
      if (get('textarea[name^="Project-overview"]')) get('textarea[name^="Project-overview"]').value = proj.poverview || '';
    }
  });
}

// === Skills ===
if (Array.isArray(resume.skills)) {
  resume.skills.forEach(async (skill, i) => {
    let skillInputs = document.querySelectorAll('input[name="skills[]"]');
    if (i >= skillInputs.length && typeof window.addSkill === 'function') {
      await addSkill(); // Ensure new skill input is added before selecting again
      skillInputs = document.querySelectorAll('input[name="skills[]"]'); // reselect after adding
    }

    const input = skillInputs[i];
    if (input) input.value = skill.skill || '';
  });
}

// === Achievements ===
if (Array.isArray(resume.Achievement)) {
  resume.Achievement.forEach(async (achievement, i) => {
    let achievementInputs = document.querySelectorAll('input[name="achievementTitle[]"]');

    if (i >= achievementInputs.length && typeof window.achievementTitle === 'function') {
      await achievementTitle(); // Add a new input field
      achievementInputs = document.querySelectorAll('input[name="achievementTitle[]"]'); // Reselect after adding
    }

    const input = achievementInputs[i];
    if (input) input.value = achievement.atitle || '';
  });
}

    // === Summary / About ===
    if (resume.about) {
      document.querySelector('textarea[name="summary"]').value = resume.about;
    }

  } catch (error) {
    console.error('Error fetching resume data:', error.message);
    if (typeof showAlert === 'function') {
      showAlert('Failed to load resume data.', 'error');
    } else {
      alert('Failed to load resume data.');
    }
  }
});







const update = document.getElementById('update');
update.addEventListener('click', async (e) => {
  e.preventDefault(); // Prevent default form submission

  // Contact details
   const formData = collectFormData();
   console.log(formData);

  try {
    // Submit the data to the backend API
    const response = await fetch('http://localhost:3000/api/resumeform/update', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(errorText || 'Failed to submit form');
    }

    // Show success alert and redirect
    showAlert('Resume created successfully!', 'success');
    
    // Redirect after short delay
    setTimeout(() => {
      window.location.href = '/home';
    }, 1500);
  } catch (error) {
    console.error('Error:', error.message);
    showAlert('An error occurred. Please try again.', 'error');
  }
});

    
function showAlert(message, type) {
  const alertContainer = document.getElementById('alert-container');
  const alert = document.createElement('div');
  alert.className = `custom-alert ${type === 'success' ? 'alert-success' : 'alert-error'}`;
  alert.textContent = message;
  alertContainer.appendChild(alert);
  setTimeout(() => alert.remove(), 3000);
}

  </script>
    <script src="/js/resumeform1.js"></script>
</body>

</html>